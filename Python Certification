-->Evaluate an expression to identify the data type Python will assign to each variable
    Identify str, int, float, and bool data types
-->Perform data and data type operations
    Convert from one data type to another type; construct data structures; perform indexing and slicing operations
-->Determine the sequence of execution based on operator precedence
    Assignment; Comparison; Logical : And is executed first before Or; Arithmetic; Identity (is); Containment (in)  
-->Select the appropriate operator to achieve the intended result
    Assignment; Comparison; Logical; Arithmetic; Identity (is); Containment (in)
    
-->Construct and analyze code segments that use branching statements
    if; elif; else; nested and compound conditional expressions
-->Construct and analyze code segments that perform iteration
    while; for; break; continue; pass; nested loops and loops that include compound conditional expressions
    
-->Document code segments using comments and documentation strings
    Use indentation, white space, comments, and documentation strings; generate documentation by using pydoc
-->Construct and analyze code segments that include function definitions
    Call signatures; default values; return; def; pass
    
-->Construct and analyze code segments that perform file input and output operations
    Open; close; read; write; append; check existence; delete; with statement
-->Construct and analyze code segments that perform console input and output operations
    Read input from console; print formatted text; use of command line arguments
    
-->Analyze, detect, and fix code segments that have errors
    Syntax errors; logic errors; runtime errors
-->Analyze and construct code segments that handle exceptions
    Try; except; else; finally; raise
    
    
-->Perform basic operations using built-in modules
    Math; datetime; io; sys; os; os.path; random
-->Solve complex computing problems by using built-in modules
    Math; datetime; random
        
 ** Exponentiation (raise to the power)
~ + -	Complement, unary plus and minus (method names for the last two are +@ and -@)
* / % //	Multiply, divide, modulo and floor division
+ -	Addition and subtraction
>> <<	Right and left bitwise shift
&	Bitwise 'AND'td>
^ |	Bitwise exclusive `OR' and regular `OR'
<= < > >=	Comparison operators
<> == !=	Equality operators
= %= /= //= -= += *= **=	Assignment operators
is is not	Identity operators
in not in	Membership operators
not or and	Logical operators

<> : not equal

1. Exponent
2. Complement,UNary, plus
3. Multiplacation/Division/Modulo/Floor
4. Addition/Subtraction
5. Bitwise(Right/Left shift)
6. Bitwise(AND)
7. Bitwise(OR/XOR)
8. Comparision(<= < > >=)
9. Comparision ( == != <>)
10. Assignment
11. Identitiy (is /is not)(both variables on left right equal)
12. Membership(in/ not in)
13. Logical (or /and/not)


--ABCAIML
112321111
    
Pydoc is a help / documentation module for Python.

Use this on your Windows terminal to understand what a function in python does :
    
Comments in Python start with the hash character, #, and extend to the end of the physical line. A comment may appear at the start of a line or following whitespace or code, but not within a string literal. A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples    
    
As part of the Python course it is taught that in order to do a multiline comment one should use """triple quotes""" . This is wrong. Python only has one way of doing comments and that is using # . Triple quotes are treated as regular strings with the exception that they can span multiple lines.   
    
Unlike other operators we've seen so far, not only takes one argument, and inverts it. 
The result of not True is False, and not False goes to True.
    
no.of items : [2,]

Lists can be added and multiplied in the same way as strings.

The insert method is similar to append, except that it allows you to insert a new item at any position in the list, as opposed to just at the end.it will not replace it

For a large programming project to be successful, it is essential to abide by the Don't Repeat Yourself, or DRY, principle. We've already looked at one way of doing this: by using loops. In this module, we will explore two more: functions and modules.

def fun():
    
    print(1)
    return
    print(2)
    
Although they are created differently from normal variables, functions are just like any other kind of value. 
They can be assigned and reassigned to variables, and later referenced by those names

Functions can also be used as arguments of other functions.

def add(x, y):
  return x + y

def do_twice(func, x, y):
  return func(func(x, y), func(x, y))

a = 5
b = 10

print(do_twice(add, a, b))

Modules are pieces of code that other people have written to fulfill common tasks, such as generating random numbers, performing mathematical operations, etc.

The basic way to use a module is to add import module_name at the top of your code, and then using module_name.var to access functions and values with the name var in the module.
For example, the following example uses the random module to generate random numbers:

There is another kind of import that can be used if you only need certain functions from a module.
These take the form from module_name import var, and then var can be used as if it were defined normally in your code. 

You can import a module or object under a different name using the as keyword. This is mainly used when a module or object has a long or confusing name.

There are three main types of modules in Python, those you write yourself, those you install from external sources, and those that are preinstalled with Python. 
The last type is called the standard library, and contains many useful modules. Some of the standard library's useful modules include string, re, datetime, math, random, os, multiprocessing, subprocess, socket, email, json, doctest, unittest, pdb, argparse and sys.

Tasks that can be done by the standard library include string parsing, data serialization, testing, debugging and manipulating dates, emails, command line arguments, and much more!

Many third-party Python modules are stored on the Python Package Index (PyPI). 

TypeError: a function is called on a value of an inappropriate type;
ValueError: a function is called on a value of the correct type, but with an inappropriate value.

Python has several other built-in exceptions, such as ZeroDivisionError and OSError. Third-party libraries also often define their own exceptions.

To ensure some code runs no matter what errors occur, you can use a finally statement. The finally statement is placed at the bottom of a try/except statement. Code within a finally statement always runs after execution of the code in the try, and possibly in the except, blocks.

You can raise exceptions by using the raise statement.

In except blocks, the raise statement can be used without arguments to re-raise whatever exception occurred.

try:
   num = 5 / 0
except:
   print("An error occurred")
   raise
   
>>>
An error occurred




An assertion is a sanity-check that you can turn on or turn off when you have finished testing the program.
An expression is tested, and if the result comes up false, an exception is raised.
Assertions are carried out through use of the assert statement.
print(1)

Programmers often place assertions at the start of a function to check for valid input, and after a function call to check for valid output.

print(1)
assert 2 + 2 == 4
print(2)
assert 1 + 1 == 3
print(3)

>>>
1
2
AssertionError
>>>

The assert can take a second argument that is passed to the AssertionError raised if the assertion fails.

temp = -10
assert (temp >= 0), "Colder than absolute zero!"

>>>
AssertionError: Colder than absolute zero!
>>>

AssertionError exceptions can be caught and handled like any other exception using the try-except statement, but if not handled, this type of exception will terminate the program.

def my_func(x):
    assert x > 0, "Error!"
    
Adding "b" to a mode opens it in binary mode, which is used for non-text files (such as image and sound files).

# binary write mode
open("filename.txt", "wb")

To read only a certain amount of a file, you can provide a number as an argument to the read function. This determines the number of bytes that should be read. 
You can make more calls to read on the same file object to read more of the file byte by byte. With no argument, read returns the rest of the file.

To retrieve each line in a file, you can use the readlines method to return a list in which each element is a line in the file.

The write method returns the number of bytes written to a file, if successful.

An alternative way of doing this is using with statements. This creates a temporary variable (often called f), which is only accessible in the indented block of the with statement.

The file is automatically closed at the end of the with statement, even if exceptions occur within it.

Like other "empty" values, such as 0, [] and the empty string, it is False when converted to a Boolean variable. 

The None object is returned by any function that doesn't explicitly return anything else.

def some_func():
   print("Hi!")

var = some_func()
print(var)
>>>
Hi!
None
>>>

Trying to index a key that isn't part of the dictionary returns a KeyError.

Only immutable objects can be used as keys to dictionaries. Immutable objects are those that can't be changed. So far, the only mutable objects you've come across are lists and dictionaries. Trying to use a mutable object as a dictionary key causes a TypeError.

ust like lists, dictionary keys can be assigned to different values.
However, unlike lists, a new dictionary key can also be assigned a value, not just ones that already exist.

A useful dictionary method is get. It does the same thing as indexing, but if the key is not found in the dictionary it returns another specified value instead ('None', by default).

print(pairs.get("orange"))
print(pairs.get(7))
print(pairs.get(12345, "not in dictionary"))

>>>
[2, 3, 4]
None
not in dictionary
>>>

String formatting provides a more powerful way to embed non-strings within strings. String formatting uses a string's format method to substitute a number of arguments in the string.

can you slice tuple : YES

print(", ".join(["spam", "eggs", "ham"]))
#prints "spam, eggs, ham"

print("Hello ME".replace("ME", "world"))
#prints "Hello world"

print("This is a sentence.".startswith("This"))
# prints "True"

print("This is a sentence.".endswith("sentence."))
# prints "True"

A key part of functional programming is higher-order functions. We have seen this idea briefly in the previous lesson on functions as objects. Higher-order functions take other functions as arguments, or return them as results.

Remaining Stuffs :

generate documentation by using pydoc

The pydoc module automatically generates documentation from Python modules. The documentation can be presented as pages of text on the console, served to a Web browser, or saved to HTML files.

For modules, classes, functions and methods, the displayed documentation is derived from the docstring (i.e. the __doc__ attribute) of the object, and recursively of its documentable members. If there is no docstring, pydoc tries to obtain a description from the block of comment lines just above the definition of the class, function or method in the source file, or at the top of the module (see inspect.getcomments()).

The built-in function help() invokes the online help system in the interactive interpreter, which uses pydoc to generate its documentation as text on the console. The same text documentation can also be viewed from outside the Python interpreter by running pydoc as a script at the operating system’s command prompt. For example, running

pydoc sys
at a shell prompt will display documentation on the sys module, in a style similar to the manual pages shown by the Unix man command. The argument to pydoc can be the name of a function, module, or package, or a dotted reference to a class, method, or function within a module or module in a package. If the argument to pydoc looks like a path (that is, it contains the path separator for your operating system, such as a slash in Unix), and refers to an existing Python source file, then documentation is produced for that file.


check existence; delete; with statement
Read input from console; print formatted text; use of command line arguments

import os.path
os.path.isfile(fname) 

import os
os.remove("ChangedFile.csv")


os.rmdir(): Removes the specified directory. The directory must be empty or Python will display an exception message.


Call signatures; default values; return; def; pass


Math; datetime; io; sys; os; os.path; random

var = datetime.date.today()
var.year
var.month
var.day
default format YYYY-mm-dd
strftime allows you specify dateformat
var.strftime('%d, %b %Y') %H %I(12) %M
strptime to convert string to date
datetime.datetime.strptime(var, '%d%m%Y).date()
if the user didnt enter string in date format, code will crash


Math; datetime; random

>>> random.random()        # Random float x, 0.0 <= x < 1.0
0.37444887175646646
>>> random.uniform(1, 10)  # Random float x, 1.0 <= x < 10.0
1.1800146073117523
>>> random.randint(1, 10)  # Integer from 1 to 10, endpoints included
7
>>> random.randrange(0, 101, 2)  # Even integer from 0 to 100
26
>>> random.choice('abcdefghij')  # Choose a random element
'c'

>>> items = [1, 2, 3, 4, 5, 6, 7]
>>> random.shuffle(items)
>>> items
[7, 3, 2, 5, 6, 4, 1]

>>> random.sample([1, 2, 3, 4, 5],  3)  # Choose 3 elements
[4, 1, 5]





    
    
    
    